{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nvar __jsx = React.createElement;\nimport React, { Component } from \"react\";\nimport Layout from \"../../components/Layout\";\nimport Auction from \"../../ethereum/auction\";\nimport { Card, Grid, Button } from \"semantic-ui-react\";\nimport web3 from \"../../ethereum/web3\";\nimport BidForm from \"../../components/BidForm\";\nimport { Link } from \"../../routes\";\n\nfunction dateFromSeconds(seconds) {\n  var t = new Date(1970, 0, 1);\n  t.setSeconds(seconds);\n  return t;\n}\n\nfunction formatDate(date) {\n  var d = new Date(date),\n      month = '' + (d.getMonth() + 1),\n      day = '' + d.getDate(),\n      year = d.getFullYear();\n  if (month.length < 2) month = '0' + month;\n  if (day.length < 2) day = '0' + day;\n  return [year, month, day].join('-');\n}\n\nvar AuctionShow =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(AuctionShow, _Component);\n\n  function AuctionShow() {\n    _classCallCheck(this, AuctionShow);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(AuctionShow).apply(this, arguments));\n  }\n\n  _createClass(AuctionShow, [{\n    key: \"renderCards\",\n    value: function renderCards() {\n      var _this$props = this.props,\n          manager = _this$props.manager,\n          auctionTitle = _this$props.auctionTitle,\n          auctionDescription = _this$props.auctionDescription,\n          startDate = _this$props.startDate,\n          endDate = _this$props.endDate,\n          totalBidders = _this$props.totalBidders,\n          totalAmountBid = _this$props.totalAmountBid,\n          myTotalBid = _this$props.myTotalBid,\n          highestBid = _this$props.highestBid;\n      var items = [{\n        header: auctionTitle,\n        meta: \"Title\",\n        description: auctionDescription\n      }, {\n        header: manager,\n        meta: \"Address of Manager\",\n        description: \"The manager handles administrative rights of this auction\",\n        style: {\n          overflowWrap: \"break-word\"\n        }\n      }, {\n        header: totalBidders,\n        meta: \"Number of Bidders\",\n        description: \"Number of people who have already made at least one bid to this auction\"\n      }, {\n        header: startDate,\n        meta: \"Starting date\",\n        description: \"This is the date the auction is supposed to start on\"\n      }, {\n        header: endDate,\n        meta: \"Ending date\",\n        description: \"This is the date the auction is supposed to end on\"\n      }, {\n        header: web3.utils.fromWei(totalAmountBid, \"ether\"),\n        meta: \"Total amount bid\",\n        description: \"Total amount of money bid(ether)\"\n      }, {\n        header: web3.utils.fromWei(highestBid, \"ether\"),\n        meta: \"Highest bid(ether)\",\n        description: \"This is the highest amount bid so far\"\n      }, {\n        header: myTotalBid,\n        meta: \"My Total bid\",\n        description: \"Cumulative amount of my bid\"\n      }];\n      return __jsx(Card.Group, {\n        items: items\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return __jsx(Layout, null, __jsx(\"h3\", null, \"Auction Show\"), __jsx(Grid, null, __jsx(Grid.Row, null, __jsx(Grid.Column, {\n        width: 10\n      }, this.renderCards()), __jsx(Grid.Column, {\n        width: 6\n      }, __jsx(BidForm, {\n        address: this.props.address\n      })))));\n    }\n  }], [{\n    key: \"getInitialProps\",\n    value: function getInitialProps(props) {\n      var auction, summary, accounts, totalBid, title, description;\n      return _regeneratorRuntime.async(function getInitialProps$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              auction = Auction(props.query.address); //Address of the auction we want to show\n\n              _context.next = 3;\n              return _regeneratorRuntime.awrap(auction.methods.getSummary().call());\n\n            case 3:\n              summary = _context.sent;\n              _context.next = 6;\n              return _regeneratorRuntime.awrap(web3.eth.getAccounts());\n\n            case 6:\n              accounts = _context.sent;\n              _context.t0 = web3.utils;\n              _context.next = 10;\n              return _regeneratorRuntime.awrap(auction.methods.getBid(accounts[0]).call());\n\n            case 10:\n              _context.t1 = _context.sent;\n              totalBid = _context.t0.fromWei.call(_context.t0, _context.t1);\n              _context.next = 14;\n              return _regeneratorRuntime.awrap(auction.methods.getAuctionTitle().call());\n\n            case 14:\n              title = _context.sent;\n              _context.next = 17;\n              return _regeneratorRuntime.awrap(auction.methods.getAuctionDescription().call());\n\n            case 17:\n              description = _context.sent;\n              return _context.abrupt(\"return\", {\n                address: props.query.address,\n                auctionTitle: title,\n                auctionDescription: description,\n                startDate: formatDate(dateFromSeconds(summary[0])),\n                endDate: formatDate(dateFromSeconds(summary[1])),\n                highestBid: summary[2],\n                totalBidders: summary[3],\n                totalAmountBid: summary[4],\n                completionStatus: summary[5],\n                manager: summary[6],\n                myTotalBid: totalBid\n              });\n\n            case 19:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      });\n    }\n  }]);\n\n  return AuctionShow;\n}(Component);\n\nexport default AuctionShow;","map":{"version":3,"sources":["/Users/cost/Google Drive/Cost Pro/Perso/Research/oas/pages/auctions/show.js"],"names":["React","Component","Layout","Auction","Card","Grid","Button","web3","BidForm","Link","dateFromSeconds","seconds","t","Date","setSeconds","formatDate","date","d","month","getMonth","day","getDate","year","getFullYear","length","join","AuctionShow","props","manager","auctionTitle","auctionDescription","startDate","endDate","totalBidders","totalAmountBid","myTotalBid","highestBid","items","header","meta","description","style","overflowWrap","utils","fromWei","renderCards","address","auction","query","methods","getSummary","call","summary","eth","getAccounts","accounts","getBid","totalBid","getAuctionTitle","title","getAuctionDescription","completionStatus"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport Layout from \"../../components/Layout\";\nimport Auction from \"../../ethereum/auction\";\nimport { Card, Grid, Button } from \"semantic-ui-react\";\nimport web3 from \"../../ethereum/web3\";\nimport BidForm from \"../../components/BidForm\";\nimport { Link } from \"../../routes\";\n\n\n\n\nfunction dateFromSeconds(seconds){\n  let t = new Date(1970, 0, 1);\n  t.setSeconds(seconds);\n  return t;\n}\n\nfunction formatDate(date) {\n  var d = new Date(date),\n      month = '' + (d.getMonth() + 1),\n      day = '' + d.getDate(),\n      year = d.getFullYear();\n\n  if (month.length < 2) month = '0' + month;\n  if (day.length < 2) day = '0' + day;\n\n  return [year, month, day].join('-');\n}\n\nclass AuctionShow extends Component {\n  static async getInitialProps(props) {\n    const auction = Auction(props.query.address); //Address of the auction we want to show\n    const summary = await auction.methods.getSummary().call();\n    const accounts = await web3.eth.getAccounts();\n    const totalBid = web3.utils.fromWei(await auction.methods.getBid(accounts[0]).call());\n    const title = await auction.methods.getAuctionTitle().call();\n    const description = await auction.methods.getAuctionDescription().call();\n    return {\n      address: props.query.address,\n      auctionTitle: title,\n      auctionDescription: description,\n      startDate: formatDate(dateFromSeconds(summary[0])),\n      endDate: formatDate(dateFromSeconds(summary[1])),\n      highestBid: summary[2],\n      totalBidders: summary[3],\n      totalAmountBid: summary[4],\n      completionStatus: summary[5],\n      manager: summary[6],\n      myTotalBid: totalBid\n    };\n  }\n\n  renderCards() {\n    const {\n      manager,\n      auctionTitle,\n      auctionDescription,\n      startDate,\n      endDate,\n      totalBidders,\n      totalAmountBid,\n      myTotalBid,\n      highestBid\n    } = this.props;\n\n    const items = [\n      {\n        header: auctionTitle,\n        meta: \"Title\",\n        description:\n        auctionDescription\n      },\n      {\n        header: manager,\n        meta: \"Address of Manager\",\n        description:\n          \"The manager handles administrative rights of this auction\",\n        style: { overflowWrap: \"break-word\" }\n      },\n      {\n        header: totalBidders,\n        meta: \"Number of Bidders\",\n        description:\n          \"Number of people who have already made at least one bid to this auction\"\n      },\n      {\n        header: startDate,\n        meta: \"Starting date\",\n        description: \"This is the date the auction is supposed to start on\"\n      },\n      {\n        header: endDate,\n        meta: \"Ending date\",\n        description: \"This is the date the auction is supposed to end on\"\n      },\n      \n      {\n        header: web3.utils.fromWei(totalAmountBid, \"ether\"),\n        meta: \"Total amount bid\",\n        description: \"Total amount of money bid(ether)\"\n      },\n      {\n        header: web3.utils.fromWei(highestBid, \"ether\"),\n        meta: \"Highest bid(ether)\",\n        description: \"This is the highest amount bid so far\"\n      },\n      {\n        header: myTotalBid,\n        meta: \"My Total bid\",\n        description: \"Cumulative amount of my bid\"\n      }\n    ];\n    return <Card.Group items={items} />;\n  }\n\n  render() {\n    return (\n      <Layout>\n        <h3>Auction Show</h3>\n        <Grid>\n          <Grid.Row>\n            <Grid.Column width={10}>{this.renderCards()}</Grid.Column>\n            <Grid.Column width={6}>\n              <BidForm address={this.props.address} />\n            </Grid.Column>\n          </Grid.Row>\n        </Grid>\n      </Layout>\n    );\n  }\n}\n\nexport default AuctionShow;\n"]},"metadata":{},"sourceType":"module"}