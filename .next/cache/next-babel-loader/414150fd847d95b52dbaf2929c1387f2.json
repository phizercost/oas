{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { Component } from \"react\";\nimport Layout from \"../../components/Layout\";\nimport Auction from \"../../ethereum/auction\";\nimport { Card, Grid, Button } from \"semantic-ui-react\";\nimport web3 from \"../../ethereum/web3\";\nimport BidForm from \"../../components/BidForm\";\nimport { Link } from \"../../routes\";\n\nfunction dateFromSeconds(seconds) {\n  let t = new Date(1970, 0, 1);\n  t.setSeconds(seconds);\n  return t;\n}\n\nfunction formatDate(date) {\n  var d = new Date(date),\n      month = '' + (d.getMonth() + 1),\n      day = '' + d.getDate(),\n      year = d.getFullYear();\n  if (month.length < 2) month = '0' + month;\n  if (day.length < 2) day = '0' + day;\n  return [year, month, day].join('-');\n}\n\nclass AuctionShow extends Component {\n  static async getInitialProps(props) {\n    const auction = Auction(props.query.address); //Address of the auction we want to show\n\n    const summary = await auction.methods.getSummary().call();\n    const accounts = await web3.eth.getAccounts();\n    const totalBid = web3.utils.fromWei((await auction.methods.getBid(accounts[0]).call()));\n    const title = await auction.methods.getAuctionTitle().call();\n    const description = await auction.methods.getAuctionDescription().call();\n    return {\n      address: props.query.address,\n      auctionTitle: title,\n      auctionDescription: description,\n      startDate: formatDate(dateFromSeconds(summary[0])),\n      endDate: formatDate(dateFromSeconds(summary[1])),\n      highestBid: summary[2],\n      totalBidders: summary[3],\n      totalAmountBid: summary[4],\n      completionStatus: summary[5],\n      manager: summary[6],\n      myTotalBid: totalBid\n    };\n  }\n\n  renderCards() {\n    const {\n      manager,\n      auctionTitle,\n      auctionDescription,\n      startDate,\n      endDate,\n      totalBidders,\n      totalAmountBid,\n      myTotalBid,\n      highestBid\n    } = this.props;\n    const items = [{\n      header: auctionTitle,\n      meta: \"Title\",\n      description: auctionDescription\n    }, {\n      header: manager,\n      meta: \"Address of Manager\",\n      description: \"The manager handles administrative rights of this auction\",\n      style: {\n        overflowWrap: \"break-word\"\n      }\n    }, {\n      header: totalBidders,\n      meta: \"Number of Bidders\",\n      description: \"Number of people who have already made at least one bid to this auction\"\n    }, {\n      header: startDate,\n      meta: \"Starting date\",\n      description: \"This is the date the auction is supposed to start on\"\n    }, {\n      header: endDate,\n      meta: \"Ending date\",\n      description: \"This is the date the auction is supposed to end on\"\n    }, {\n      header: web3.utils.fromWei(totalAmountBid, \"ether\"),\n      meta: \"Total amount bid\",\n      description: \"Total amount of money bid(ether)\"\n    }, {\n      header: web3.utils.fromWei(highestBid, \"ether\"),\n      meta: \"Highest bid(ether)\",\n      description: \"This is the highest amount bid so far\"\n    }, {\n      header: myTotalBid,\n      meta: \"My Total bid\",\n      description: \"Cumulative amount of my bid\"\n    }];\n    return __jsx(Card.Group, {\n      items: items\n    });\n  }\n\n  render() {\n    return __jsx(Layout, null, __jsx(\"h3\", null, \"Auction Show\"), __jsx(Grid, null, __jsx(Grid.Row, null, __jsx(Grid.Column, {\n      width: 10\n    }, this.renderCards()), __jsx(Grid.Column, {\n      width: 6\n    }, __jsx(BidForm, {\n      address: this.props.address\n    })))));\n  }\n\n}\n\nexport default AuctionShow;","map":{"version":3,"sources":["/Users/cost/Google Drive/Cost Pro/Perso/Research/oas/pages/auctions/show.js"],"names":["React","Component","Layout","Auction","Card","Grid","Button","web3","BidForm","Link","dateFromSeconds","seconds","t","Date","setSeconds","formatDate","date","d","month","getMonth","day","getDate","year","getFullYear","length","join","AuctionShow","getInitialProps","props","auction","query","address","summary","methods","getSummary","call","accounts","eth","getAccounts","totalBid","utils","fromWei","getBid","title","getAuctionTitle","description","getAuctionDescription","auctionTitle","auctionDescription","startDate","endDate","highestBid","totalBidders","totalAmountBid","completionStatus","manager","myTotalBid","renderCards","items","header","meta","style","overflowWrap","render"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport Layout from \"../../components/Layout\";\nimport Auction from \"../../ethereum/auction\";\nimport { Card, Grid, Button } from \"semantic-ui-react\";\nimport web3 from \"../../ethereum/web3\";\nimport BidForm from \"../../components/BidForm\";\nimport { Link } from \"../../routes\";\n\n\n\n\nfunction dateFromSeconds(seconds){\n  let t = new Date(1970, 0, 1);\n  t.setSeconds(seconds);\n  return t;\n}\n\nfunction formatDate(date) {\n  var d = new Date(date),\n      month = '' + (d.getMonth() + 1),\n      day = '' + d.getDate(),\n      year = d.getFullYear();\n\n  if (month.length < 2) month = '0' + month;\n  if (day.length < 2) day = '0' + day;\n\n  return [year, month, day].join('-');\n}\n\nclass AuctionShow extends Component {\n  static async getInitialProps(props) {\n    const auction = Auction(props.query.address); //Address of the auction we want to show\n    const summary = await auction.methods.getSummary().call();\n    const accounts = await web3.eth.getAccounts();\n    const totalBid = web3.utils.fromWei(await auction.methods.getBid(accounts[0]).call());\n    const title = await auction.methods.getAuctionTitle().call();\n    const description = await auction.methods.getAuctionDescription().call();\n    return {\n      address: props.query.address,\n      auctionTitle: title,\n      auctionDescription: description,\n      startDate: formatDate(dateFromSeconds(summary[0])),\n      endDate: formatDate(dateFromSeconds(summary[1])),\n      highestBid: summary[2],\n      totalBidders: summary[3],\n      totalAmountBid: summary[4],\n      completionStatus: summary[5],\n      manager: summary[6],\n      myTotalBid: totalBid\n    };\n  }\n\n  renderCards() {\n    const {\n      manager,\n      auctionTitle,\n      auctionDescription,\n      startDate,\n      endDate,\n      totalBidders,\n      totalAmountBid,\n      myTotalBid,\n      highestBid\n    } = this.props;\n\n    const items = [\n      {\n        header: auctionTitle,\n        meta: \"Title\",\n        description:\n        auctionDescription\n      },\n      {\n        header: manager,\n        meta: \"Address of Manager\",\n        description:\n          \"The manager handles administrative rights of this auction\",\n        style: { overflowWrap: \"break-word\" }\n      },\n      {\n        header: totalBidders,\n        meta: \"Number of Bidders\",\n        description:\n          \"Number of people who have already made at least one bid to this auction\"\n      },\n      {\n        header: startDate,\n        meta: \"Starting date\",\n        description: \"This is the date the auction is supposed to start on\"\n      },\n      {\n        header: endDate,\n        meta: \"Ending date\",\n        description: \"This is the date the auction is supposed to end on\"\n      },\n      \n      {\n        header: web3.utils.fromWei(totalAmountBid, \"ether\"),\n        meta: \"Total amount bid\",\n        description: \"Total amount of money bid(ether)\"\n      },\n      {\n        header: web3.utils.fromWei(highestBid, \"ether\"),\n        meta: \"Highest bid(ether)\",\n        description: \"This is the highest amount bid so far\"\n      },\n      {\n        header: myTotalBid,\n        meta: \"My Total bid\",\n        description: \"Cumulative amount of my bid\"\n      }\n    ];\n    return <Card.Group items={items} />;\n  }\n\n  render() {\n    return (\n      <Layout>\n        <h3>Auction Show</h3>\n        <Grid>\n          <Grid.Row>\n            <Grid.Column width={10}>{this.renderCards()}</Grid.Column>\n            <Grid.Column width={6}>\n              <BidForm address={this.props.address} />\n            </Grid.Column>\n          </Grid.Row>\n        </Grid>\n      </Layout>\n    );\n  }\n}\n\nexport default AuctionShow;\n"]},"metadata":{},"sourceType":"module"}